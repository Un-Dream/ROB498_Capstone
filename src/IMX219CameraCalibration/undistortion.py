import cv2 
import numpy as np
import os

# Camera matrix generated by `find_chessboard_corners.py`
resoluion_mode = 2
# mode 1 for 3280 * 2464 fps21
# mode 2 for 1640 * 1232 fps30

# Camera matrix generated by `find_chessboard_corners.py`
if resoluion_mode == 1:
    mtx = np.array([[3.91395464e+02, 0.00000000e+00, 3.90500968e+02],
                    [0.00000000e+00, 3.90488477e+02, 2.67791170e+02],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]])
    dist = np.array([[-0.3589407, 0.17506962, 0.0007139, 0.00068398, -0.04666356]])
    folder = "/home/jetson/ROB498_FlightExercises/src/Jetson-Nano-IMX219-Camera-Calibration-OpenCV/capture/"

elif resoluion_mode == 2:
    mtx = np.array([[1.90141428e+02, 0.00000000e+00, 1.93371637e+02],
                    [0.00000000e+00, 1.90074752e+02, 1.36530788e+02],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]])
    dist = np.array([[-0.33485375, 0.14237009, 0.00069925, 0.00196279, -0.03062868]])
    folder = "/home/jetson/ROB498_FlightExercises/src/Jetson-Nano-IMX219-Camera-Calibration-OpenCV/capture_lowResolution/"

for filename in os.listdir(folder):
    print("read filename %s" % filename)
    # load image
    img = cv2.imread(folder + filename)
    if img is None :
        print("empty image with filename %s" % filename) 
        continue
    img = cv2.resize(img, (0,0), fx=0.25, fy=0.25)
    h, w, c = img.shape

    # refine the camera matrix based on a free scaling parameter using cv.getOptimalNewCameraMatrix().
    newcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (w,h), 0, (w,h))

    # undistort using cv2.undistort()
    dst = cv2.undistort(img, mtx, dist, None, newcameramtx)

    # crop the image
    x, y, w, h = roi
    dst = dst[y:y+h, x:x+w]

    cv2.imshow('calibresult.png', dst)
    cv2.waitKey(0)
cv2.destroyAllWindows()