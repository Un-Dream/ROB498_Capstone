import cv2 
import numpy as np
import os
# from gst_cam import camera

resoluion_mode = 2
# mode 1 for 3280 * 2464 fps21
# mode 2 for 1640 * 1232 fps30

# Camera matrix generated by `find_chessboard_corners.py`

def camera(i, w, h):
    return "nvarguscamerasrc sensor_id=%d ! \
    video/x-raw(memory:NVMM), \
    width=%d, height=%d, \
    format=(string)NV12, \
    framerate=21/1 ! \
    nvvidconv \
    flip-method=2  ! \
    video/x-raw, \
    format=(string)BGRx ! \
    videoconvert ! \
    video/x-raw, \
    format=(string)BGR ! \
    appsink" % (i, w, h)


if resoluion_mode == 1:
    mtx = np.array([[3.91395464e+02, 0.00000000e+00, 3.90500968e+02],
                    [0.00000000e+00, 3.90488477e+02, 2.67791170e+02],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]])
    dist = np.array([[-0.3589407, 0.17506962, 0.0007139, 0.00068398, -0.04666356]])

    w, h = 3280, 2464
elif resoluion_mode == 2:
    mtx = np.array([[1.90141428e+02, 0.00000000e+00, 1.93371637e+02],
                    [0.00000000e+00, 1.90074752e+02, 1.36530788e+02],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]])
    dist = np.array([[-0.33485375, 0.14237009, 0.00069925, 0.00196279, -0.03062868]])

    w, h = 1640, 1232

cap = cv2.VideoCapture(camera(0, w, h))

while True :
    ret, frame = cap.read()
    if not ret :
        print("dead")
        break

    frame = cv2.resize(frame, (0,0), fx=0.25, fy=0.25)
    h, w, c = frame.shape

    # refine the camera matrix based on a free scaling parameter using cv.getOptimalNewCameraMatrix().
    newcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (w,h), 0, (w,h))

    # undistort using cv2.undistort()
    dst = cv2.undistort(frame, mtx, dist, None, newcameramtx)

    # crop the image
    x, y, w, h = roi
    dst = dst[y:y+h, x:x+w]

    cv2.imshow('Calibration Result', dst)
    key = cv2.waitKey(10)
    if key == ord("q"):
        break

cv2.destroyAllWindows()